import React from 'react';
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import axios from "axios";
import logo from './assets/images/logo.jpg';
import logo_large from './assets/images/logo_large.jpg';
import Rotate from './assets/images/Rotate.gif';
import "./assets/css/login.css";
import "./assets/css/style.css";

import { useHistory } from "react-router-dom";
import { Link } from 'react-router-dom'
import  { useEffect, useState } from 'react';
import Swal from 'sweetalert2'
// import withReactContent from 'sweetalert2-react-content'
function Report() {
  const months= ["Jan", "Feb", "Mar", "April", "May", "June",
  "July", "Aug", "Sep", "Oct", "Nov", "Dec"
];
 
  const current = new Date();
  const date = `${current.getDate()}/${months[current.getMonth()]}/${current.getFullYear()}`;
  const [CompanyName, setCompanyName] = useState('');
  const [Ourrefrence, setID] = useState('');
  const [ContactPerson, setContactPerson] = useState('');
  
  const [ProjectLocation, setProjectLocation] = useState('');
  const [CustomerDesignation, setCustomerDesignation] = useState('');
  const [CustomerContactNumber, setCustomerContactNumber] = useState('');
  const [RoomName, setRoomName] = useState('');
  const [RoomDeminsion, setRoomDeminsion] = useState('');
  const [IsulationType, setIsulationType] = useState('');
  const [IsolationThickness, setIsolationThickness] = useState('');
  const [SurrondingsTemparature, setSurrondingsTemparature] = useState('');
  const [RoomTemparature,  setRoomTemparature] = useState('');
  const [Product, setProduct] = useState('')  ;
  const [RoomStorageCapacity,  setRoomStorageCapacity] = useState('');
  const [PeopleOccupancyDurationPerDay,   setPeopleOccupancyDurationPerDay] = useState('');
  const [ProductinTemperature,   setProductinTemperature] = useState('');
  const [BatchPerDayLoadingKg,  setBatchPerDayLoadingKg] = useState('');
  const [BatchPerDayLoadingHrs,  setBatchPerDayLoadingHrs] = useState('');
  const [Occupancy,  setOccupancy] = useState('');
  const [ProductOutTemp,  setProductOutTemp] = useState('');
  const [LightingHoursPerDay,  setLightingHoursPerDay] = useState('');
  const [MotorOperationTimePerDay,  setMotorOperationTimePerDay] = useState('');
  const [TransmissionLoad,  setTransmissionLoad] = useState('');
  const [TotalHeatLoad,  setTotalHeatLoad] = useState('');
  const [InfiltrationLoad,  setInfiltrationLoad] = useState('');
  const [SensibleLoadAboveFreezing,  setSensibleLoadAboveFreezing] = useState('');
  const [HeatLoadAfterSafety,  setHeatLoadAfterSafety] = useState('');
  const [CompressorRunningHour,  setCompressorRunningHour] = useState('');
  const [AdjustedRoomHeatLoad, setAdjustedRoomHeatLoad] = useState('');
  const [SensibleLoadBelowFreezing,  setSensibleLoadBelowFreezing] = useState('');
  const [SafetyFactor,  setSafetyFactor] = useState('');
  const [MiscellaneousLoad,  setMiscellaneousLoad] = useState('');
  const [RespirationLoad,  setRespirationLoad] = useState('');
  const [LatentLoad,  setLatentLoad] = useState('');
  const [RefrigerationHeatLoad,  setRefrigerationHeatLoad] = useState('');
  let history = useHistory();
   
  // alert(Ourrefrence)
 
  useEffect( async() => {
    await axios.get("/getlogin")
    .then((response) => {
  //  alert((response.data.loggedin));
   if(response.data.loggedin=="true"){  
    axios.get("/getreport")
    .then((response) => {
   console.log(response);
    // alert(response.data.customer.refid)
    setID(response.data.customer.refid)
   setCompanyName(response.data.customer.projectname)
   setContactPerson(response.data.customer.custcontactperson)
   setCustomerDesignation(response.data.customer.custdesignation)
   setProjectLocation(response.data.customer.projectlocation)
   setCustomerContactNumber(response.data.customer.custcontactnumber)
   setRoomName(response.data.input.application) 
   let roomd=`${parseFloat(response.data.input.lmeter).toFixed(1)}x${parseFloat(response.data.input.wmeter).toFixed(1)}x${parseFloat(response.data.input.hmeter).toFixed(1)}`
   setRoomDeminsion(roomd)  
   setIsulationType(response.data.input.nsulation)  
   setIsolationThickness(response.data.input.mmthickeness)  
   setSurrondingsTemparature(response.data.input.stc)   
   setRoomTemparature(response.data.input.rtc)  
   setProduct(response.data.product.subproduct)  
   setRoomStorageCapacity(response.data.input.storagecapacity)  
   setProductinTemperature(response.data.input.pitc)  
   setBatchPerDayLoadingKg(response.data.input.batchloading)  
   setBatchPerDayLoadingHrs(response.data.input.pulldowntime)  
   setOccupancy(response.data.input.nop)  
   setPeopleOccupancyDurationPerDay(response.data.miscellaneous.hour)  
   setLightingHoursPerDay(response.data.miscellaneous.lhour)  
   setMotorOperationTimePerDay(response.data.miscellaneous.mhour)   
   setTransmissionLoad(response.data.result.transmission_load)   
   setTotalHeatLoad(response.data.result.total_heat_load)   
   setInfiltrationLoad(response.data.result.infiltration_load) 
   setSafetyFactor(response.data.result.safety_factor)   
   setSensibleLoadAboveFreezing(response.data.result.sensible_heat_load_above) 
   setHeatLoadAfterSafety(response.data.result.load_after_safety) 
   setCompressorRunningHour(response.data.result.compress_running)       
   setLatentLoad(response.data.result.Latent_heat_Load)  
   setAdjustedRoomHeatLoad(response.data.result.refrigeration_load_hr)
   setSensibleLoadBelowFreezing(response.data.result.sensible_heat_load_below)
   setMiscellaneousLoad(response.data.result.Miscellaneous_load)
  
   
   setProductOutTemp(response.data.input.pftc)
   setRespirationLoad(response.data.result.respiration_heat_load)
   setRefrigerationHeatLoad(response.data.result.refrigeration_load_kw)
    })
      .catch((error) => console.log(error.message));
    }
     else{
      localStorage.removeItem("customer_name");
       history.push("/");
     }
   
    
     
      // alert(JSON.stringify(response.data.projectname))
    })
    
      .catch((error) => console.log(error.message));
    
    
  }, []);
  function clear(){
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes'
  }).then((result) => {
    if (result.isConfirmed) {
      axios.get("/cleareport")
      .then((response) => {
     console.log(response);
     localStorage.removeItem("customer_name");
      Swal.fire(
        'Cleared!',
        'Your previous data cleared.',
        'success'
        
      )
      
    });
    history.push("/Customer");
    }
   
  })
}
  const validationSchema = Yup.object().shape({
    // email: Yup.string().required(),
    // password: Yup.string().min(4).max(20).required(),
    
  });
  function print(){
    // var watermark=document.getElementById("watermark").innerHTML;
   var divContents = document.getElementById("print").innerHTML;  
   
    var printWindow = window.open('', '', 'height=1600,width=800');
    printWindow.document.write('<html><head><title></title>');  
    printWindow.document.write(
    '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">'); 
    printWindow.document.write(
     '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">'
      )
    printWindow.document.write('<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">')
    // printWindow.document.write('.watermark');
    printWindow.document.write('</head><body>'); 
    printWindow.document.write('<div className="container">');
    printWindow.document.write(divContents);
    console.log(divContents);
    printWindow.document.write('</div>');  
    printWindow.document.write('</body></html>');  
    printWindow.document.close(); 
    setTimeout(function () {
      printWindow.print();   
  }, 500);
  }
  const onSubmit = (data) => {
    //    alert(data);
        axios
          .post("/transmission", data)
          .then((response) => {
          //  alert(JSON.stringify(response.data))
            history.push("/product");
                                     
            //console.log(data);
          });
      };
  


const mystyle={
  
  display: 'block',
  width: '40%',
  height: '10%',
  position: 'absolute',
  top: '35%',
  left: '30%',
  // backgroundimage:'url("http://placehold.it/100x100/09f/fff.png")',
  backgroundsize: '100px 100px',
  backgroundposition: '30px 30px',
  backgroundrepeat: 'no-repeat',
  opacity: '0.2',

}


      function getNum(val) {
        if (isNaN(val)) {
          return 0;
        }
        return val;
     }
    return(

      
      <div >
    
      <meta charSet="UTF-8"/>
      <meta name="viewport" content="target-densitydpi=device-dpi, width=device-width, initial-scale=1.0" />
      <meta httpEquiv="X-UA-Compatible" content="ie=edge" />
      <meta http-equiv="ScreenOrientation" ></meta>
      <title>Transmission Carrier</title>
      <body style={{overflowX:"hidden"}}>
     
      <link rel="stylesheet" type="text/css" href="css/portrait.css" media="screen and (orientation: portrait)"></link>
      <link href="https://fonts.googleapis.com/css?family=Karla:400,700&display=swap" rel="stylesheet" />
      <link rel="stylesheet" href="https://cdn.materialdesignicons.com/4.8.95/css/materialdesignicons.min.css" />
      <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" />
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous"></link>
      <link rel="stylesheet" href="css/print.css" type="text/css" media="print"/>
      <link rel="stylesheet" href="assets/css/login.css" />
      <link rel="stylesheet" href="assets/css/all.min.css" />
      <div id="mobile">
      <img src={ Rotate} alt="" id="center-device" /> 
     
    </div>
      <div className="col-xl shadow-sm p-2 mb-1 bg-white">
      <div className="col-md-18 d-none d-lg-block d-md-block">
      <img src={logo} alt="logo" className="logo" />
     
      <b className="pt-3" style={{float: 'right'}}>&nbsp;{localStorage.getItem('customer_name')}</b>
      </div>
      </div>


      <div className="col-md-18 d-block d-sm-block d-md-none d-lg-none">
      {/* <div className="col-md-18"> */}
      <img src={logo_large} alt="logo" className="logo" width="100px" height="40px" />
      <b className="pt-2" style={{float:'right'}}>&nbsp;{localStorage.getItem('customer_name')}</b>

      </div>
      
      <div className="content-container">
        <div className="contents">
         {/* <div className="container"> */}
            <div className="row">
              <div className="col-md-2 shadow p-0 bg-white" >
                <nav id="sidebar" className="navbar navbar-expand-md navbar-light">		
                  <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#topnavbar" aria-controls="topnavbar" aria-expanded="false" aria-label="Toggle navigation">
                    <span className="navbar-toggler-icon" />
                  </button>
                  <div id="topnavbar" className="collapse navbar-collapse" style={{padding: '5px', backgroundColor: '#000099'}}>
                    <ul className="list-unstyled nav-text text-responsive"> 
                    <li>
                    <Link to="customer" style={{"color":"#b3ecff"}} >Customer Details</Link>
                    </li>
                    <li className="line"/>			
                    <li>
                    <Link to="input" style={{"color":"#b3ecff"}}>Input</Link>
                    </li>
                    <li className="line"/>
                    <li>
                    <Link to="transmission" style={{"color":"#b3ecff"}}>Transmission Load</Link>
                    </li>
                    <li className="line" />
                    <li>
                    <Link to="product" style={{"color":"#b3ecff"}}>Product Load</Link>
                    </li>
                    <li className="line" />
                    <li>
                    <Link to="miscellaneous" style={{"color":"#b3ecff"}}>Miscellaneous Load</Link>
                    </li>
                    <li className="line" />
                    <li>
                    <Link to="result" style={{"color":"#b3ecff"}} >Result</Link>
                    </li>
                    <li className="line" />
                    <li>
                    <Link to="report" style={{"color":"white","font-weight":"bold","fontSize":"18px"}} >Report</Link>
                    </li>
                    <li className="line" />
                    <li>
                    <Link to="/" style={{"color":"#b3ecff"}} >Logout</Link>
                    </li>
                    <li className="line" />
                    {/* <li>
                    <Link to="equipment" style={{"color":"#b3ecff"}}>Equipment Selection</Link>
                      
                    </li>	 */}
                      <br /><br /><br /><br /><br /><br /><br /><br />
                      <br /><br /><br /><br /><br /><br /><br />	
                      <br /><br /><br /><br /><br /><br /><br /><br />
                      <br /><br /><br/><br/><br/><br/><br /><br /><br /><br /><br /><br /><br /><br />
                      <br /><br /><br/><br/><br/><br/><br /><br /><br/><br/><br/><br/><br /><br /><br/><br/><br/><br/>
                   <br/><br/><br/><br/>
                    </ul>
                  </div>			 
                </nav>  
            </div>

        <div className="col-md-10 p-4 container-fluid"  > 
        <button onClick={print} style={{'float':'right'}}>Print</button> 
        <button onClick={clear} > New Heatload</button> 
     
        <br/><br/><br/>
        <div className="container" id="print">
        <center className="col-md-18 d-none d-lg-block d-md-block">
        <table  className="table  table-borderless"  style={{width:"93%"}}>
        <tr>
        <td><img  id="logo1" src={logo_large} alt="logo"  className="logo pt-0 " width="120px" height="45px"/></td>
        <td><h3 className="col-sm" style={{"fontSize":"26px"}} id="h3"><b className="pt-0 p-0  text-responsive">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Carrier Commercial Refrigeration</b></h3>
        <h6 className="col-sm" style={{"fontSize":"18px"}} id="h6"><b style={{"paddingLeft":"135px"}}>Heat Load Estimation Summary</b></h6></td>
        </tr>
        
        </table>
        </center>
        <center className="col-md-18 d-block d-sm-block d-md-none d-lg-none">
        <table  className="table  table-borderless"  style={{width:"93%"}}>
        <tr>
        <td><img  id="logo1" src={logo_large} alt="logo"  className="logo pt-0 " width="120px" height="45px"/></td>
        <td><h3 className="col-sm" style={{"fontSize":"26px"}} id="h3"><b className="pt-0 p-0  text-responsive">Carrier Commercial Refrigeration</b></h3>
        <h6 className="col-sm" style={{"fontSize":"18px"}} id="h6"><b>Heat Load Estimation Summary</b></h6></td>
        </tr>
        
        </table>
        </center>
        <br/> 
        <center>
        
        <table id="table" className="table table-bordered " border-collapse="collapse" style={{width:'93%'}} >
          <thead>
            <tr>
              <th colSpan="2" >Project details</th>
              <th colSpan="2">Customer details</th>
              
            </tr>
          </thead>
          <tbody>
            <tr>
              <td style={{width:"15%"}}>Our Ref:</td>
              <td style={{width:"10%"}}>{Ourrefrence}</td>
              <td style={{width:"15%"}}>Company Name:</td>
              <td style={{width:"15%"}}>{CompanyName}</td>
            </tr>
            <tr>
              <td>Date :  </td>
              <td> {date}</td>
              <td>Contact Person: </td>
              <td>{ContactPerson}</td>
            </tr>
            <tr>
              <td>Submitted By :</td>
              <td>{localStorage.getItem('username')}</td>
              <td>Customer Designation:</td>
              <td>{CustomerDesignation}</td>
            </tr>
          </tbody>
          <tbody><tr>
              <td>Project Location :</td>
              <td>{ProjectLocation}</td>
              <td>Customer Contact Number:</td>
              <td>{CustomerContactNumber}</td>
            </tr>
</tbody></table></center>
          <table>
            <tr>
            <br/>
              <td  id="watermark" ><br/><img src={logo_large} style={mystyle} alt="logo" className="logo" width="100px" height="40px"></img></td>
            </tr>
          </table>
        <center>
        <table   cellSpacing="2" className="table table-bordered " border-collapse="collapse" style={{width:'93%'}}>
          <thead className="">
            <th colSpan={6} style={{textAlign: 'center'}}><b>Basis of Design</b></th>
            </thead>
          <tbody>
            <tr>
              <td>Room Name :</td>
              <td colSpan="2">{RoomName}</td>
              {/* <td ></td> */}
              <td>Room Dimension(L*B*H):</td>
              <td>{RoomDeminsion}</td>
              <td>Meter</td>
            </tr>
            <tr>
              <td >Insulation Type:</td>
              <td  colSpan="2">{IsulationType}</td>
              {/* <td></td> */}
              <td>Insulation Thickness:</td>
              <td>{getNum(parseInt(IsolationThickness))}</td>
              
              <td>MM</td>
            </tr>
            <tr>
              <td>Surrounding Temperature:</td>
              <td>{getNum(parseInt(SurrondingsTemparature))}</td>
              <td style={{width:"10%"}}>Deg C</td>
              <td>Room Temperature:</td>
              <td>{getNum(parseInt(RoomTemparature))}</td>
              <td>Deg C</td>
            </tr>
            <tr>
              <td>Product:</td>
              <td colSpan="2">{Product}</td>
              {/* <td></td> */}
              <td>Room Storage Capacity:</td>
              <td>{getNum(parseInt(RoomStorageCapacity))}</td>
              <td>Metric Ton</td>
            </tr>
            <tr>
              <td>Product Entering Temperature:</td>
              <td>{getNum(parseInt(ProductinTemperature))}</td>
             
              <td>Deg C</td>
              <td>Product load per batch:</td>
              <td>{getNum(parseInt(BatchPerDayLoadingKg))}</td>
              <td>Kg</td>
            </tr>
            <tr>
              <td>Product Final Temperature:</td>
              <td>{getNum(parseInt(ProductOutTemp))}</td>
             
              <td>Deg C</td>
              <td>Pull Down Hours:</td>
              <td>{getNum(parseInt(BatchPerDayLoadingHrs))}</td>
              <td>Hrs</td>
            </tr>
            <tr>
              <td>Occupancy:</td>
              <td>{getNum(parseInt(Occupancy))}</td>
              
              <td>No's</td>
              <td>People Occupancy Duration Per Day:</td>
              <td>{getNum(parseInt(PeopleOccupancyDurationPerDay))}</td>
              <td>Hrs</td>
            </tr>
            <tr>
              <td>Lighting Hours Per Day:</td>
              <td>{getNum(parseInt(LightingHoursPerDay))}</td>
              
              <td>Hrs</td>
              <td>Motor Operation Time Per Day:</td>
              <td>{getNum(parseInt(MotorOperationTimePerDay))}</td>
              
              <td>Hrs</td>
            </tr>
          </tbody></table>
         
          </center>
        <br />
        <center>
    
        <table cellSpacing="2"  border-collapse="collapse"className="table table-bordered"  style={{width:'93%'}} >
          <thead>
            <tr><th colSpan={6} style={{textAlign: 'center'}}>Refrigeration Load Summary</th>
            </tr></thead>
          <tbody>
            <tr>
              <td style={{width:"25%"}}>Transmission Load</td>
              <td style={{width:"10%"}}>{getNum(parseInt(TransmissionLoad))}</td>
              <td style={{width:"10%"}}>BTU/Hr</td>
              <td style={{width:"33%"}}>Total Calculated load w/o safety Factor</td>
              <td >{getNum(parseInt(TotalHeatLoad))}</td>
              <td  style={{width:"11%"}}>BTU/Hr</td>
            </tr>
            <tr>
              <td>Infiltration Load</td>
              <td>{getNum(parseInt(InfiltrationLoad))}</td>
              <td>BTU/Hr</td>
              <td>Safety Factor</td>
              <td>{getNum(parseInt(SafetyFactor))}</td>
              <td>%</td>
            </tr>
            <tr>
              <td>Sensible Load Above Freezing</td>
              <td>{getNum(parseInt(SensibleLoadAboveFreezing))}</td>
              <td>BTU/Hr</td>
              <td>Heat Load After Safety</td>
              <td>{getNum(parseInt(HeatLoadAfterSafety))}</td>
              <td>BTU/Hr</td>
            </tr>
            <tr>
              <td>Respiration Load</td>
              <td>{getNum(parseInt(RespirationLoad))}</td>
              <td>BTU/Hr</td>
              <td>Compressor Running Hour</td>
              <td>{getNum(parseInt(CompressorRunningHour))}</td>
              <td>Hrs</td>
            </tr>
            <tr>
              <td>Latent Load</td>
              <td>{getNum(parseInt(LatentLoad))}</td>
              <td>BTU/Hr</td>
              <td>Adjusted Room Heat Load</td>
              <td>{getNum(parseInt(AdjustedRoomHeatLoad))}</td>
              <td>BTU/Hr</td>
            </tr>
            <tr>
              <td>Sensible Load Below Freezing </td>
              <td>{getNum(parseInt(SensibleLoadBelowFreezing))}</td>
              <td>BTU/Hr</td>
              <td colSpan="3" rowSpan="2"></td>
              {/* <td></td>
              <td></td> */}
            </tr>
            <tr>
              <td>Miscellaneous Load </td>
              <td>{getNum(parseInt(MiscellaneousLoad))}</td>
              <td>BTU/Hr</td>
              {/* <td></td>
              <td></td>
              <td></td> */}
            </tr>
            <tr>
              <td colSpan={4}><b> Required Refrigeration Capacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              </b>
               </td>
              <td><b>{getNum(parseFloat(RefrigerationHeatLoad).toFixed(1))}</b></td>
              <td><b>kW</b></td>
            </tr>
          </tbody>
        </table>
        </center>

        <center>
        <br/><br/><br/><br/><br/><br/><br/>
      <table  cellSpacing="" border-collapse="collapse" className="table table-bordered"  style={{width:'93%'}}>
      <thead style={{"float":"left","fontSize":"10px"}}>
        <th style={{"fontSize":"10px"}}> Disclaimer:-<p style={{fontWeight:"normal"}}>Carrier Airconditioning & Refrigeration Limited (Carrier) makes no representation or warranty, express or implied, either infact or by operation of law, statute, or otherwise, and specifically
            disclaims any and all implied or statutory warranties related to heatload calculated by the software. The customer shall be fully responsible and shall be sole decision maker to decide the capacity of
              cold room equipment required for its site without any liability on Carrier.</p></th>
       </thead>
      </table>
      <br/>
      
      </center>
      <center>
      <a href="#" style={{paddingLeft:"79%"}}>www.carrierindia.com</a>
      </center>

      </div>

              </div>
            </div>
          </div>
          
           </div>
     </body>
        </div>
       
        // </div>
    );
  }

export default Report;
